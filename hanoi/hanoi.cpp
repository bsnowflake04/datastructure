// hanoi.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <stdio.h>

//	汉诺塔问题： 我先在小游戏里体验了3到6阶的汉诺塔是怎么移动的。我们把这所有的步骤想象成一个流程，那么这其中关键的结点有哪些
//	以6阶举例，我们都知道必须有一步是让第6层到c，那么第6层的任务就是c。并且此时前五层必须在b，
//	要达成这个条件，对于第5层来说，前4层就必须在c，只有这样才能保证第五层由a移动到b，那么第五层的任务是b
//	对于第四层来说，它要是想到c，前三层就必须在b，第四层的任务是c

//	由此，在我们未开始游戏时，由下往上这些圆盘的任务依次是cbcbcb。这些关键的结点，包括第六层移动到c，第五层移动到b，第四层移动到c，第三层移动到b。。
//	通过达成一个个结点任务，我使第六层顺利到c，这时我们就可以把它当成空气了。现在开始玩的是5层汉诺塔游戏。此时所有层在b，我们把b当成a，它们由下往上的任务依次是cacac

//	此时有点递归的意思了，我又发现这个流程被第六层从a移动到c分成了两个部分，每个部分都是一次5层汉诺塔游戏，不同的是第一次是将5层从a移动到b,第二次是从b移动到c
//	而对于每一次5层汉诺塔，第五层从a移动到b又可以它分成两个四层汉诺塔游戏，比如第一次分为将四层从a移动到c,将四层从c移动到b
//	

int hanoi(int n, char a, char b, char c) {
	if (n == 0)return 0;
	else {
		hanoi(n - 1, a, c, b);
		std::cout << a << "->" << c << '\n';
		hanoi(n - 1, b, a, c);
	}
}

int main()
{
    std::cout << "Hello World!\n";
	hanoi(3, 'a', 'b', 'c');
	return 0;
}


// 运行程序: Ctrl + F5 或调试 >“开始执行(不调试)”菜单
// 调试程序: F5 或调试 >“开始调试”菜单

// 入门使用技巧: 
//   1. 使用解决方案资源管理器窗口添加/管理文件
//   2. 使用团队资源管理器窗口连接到源代码管理
//   3. 使用输出窗口查看生成输出和其他消息
//   4. 使用错误列表窗口查看错误
//   5. 转到“项目”>“添加新项”以创建新的代码文件，或转到“项目”>“添加现有项”以将现有代码文件添加到项目
//   6. 将来，若要再次打开此项目，请转到“文件”>“打开”>“项目”并选择 .sln 文件
